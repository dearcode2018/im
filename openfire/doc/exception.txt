exception 解决方法

1)
org.jivesoftware.smack.SmackException: javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
	at org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader.parsePackets(XMPPTCPConnection.java:1017)
	at org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader.access$200(XMPPTCPConnection.java:944)
	at org.jivesoftware.smack.tcp.XMPPTCPConnection$PacketReader$1.run(XMPPTCPConnection.java:959)


后来上网查了很久，说是证书出问题了，服务器不信任我们自己创建的证书，所以在代码中必须要忽略证书信任问题。只要在创建connection之前调用两个方法：
Java代码  收藏代码

    trustAllHttpsCertificates();  
    HttpsURLConnection.setDefaultHostnameVerifier(hv);  


具体的实现是：
Java代码  收藏代码

    HostnameVerifier hv = new HostnameVerifier() {  
            public boolean verify(String urlHostName, SSLSession session) {  
                System.out.println("Warning: URL Host: " + urlHostName + " vs. "  
                                   + session.getPeerHost());  
                return true;  
            }  
        };  
          
        private static void trustAllHttpsCertificates() throws Exception {  
            javax.net.ssl.TrustManager[] trustAllCerts = new javax.net.ssl.TrustManager[1];  
            javax.net.ssl.TrustManager tm = new miTM();  
            trustAllCerts[0] = tm;  
            javax.net.ssl.SSLContext sc = javax.net.ssl.SSLContext  
                    .getInstance("SSL");  
            sc.init(null, trustAllCerts, null);  
            javax.net.ssl.HttpsURLConnection.setDefaultSSLSocketFactory(sc  
                    .getSocketFactory());  
        }  
      
        static class miTM implements javax.net.ssl.TrustManager,  
                javax.net.ssl.X509TrustManager {  
            public java.security.cert.X509Certificate[] getAcceptedIssuers() {  
                return null;  
            }  
      
            public boolean isServerTrusted(  
                    java.security.cert.X509Certificate[] certs) {  
                return true;  
            }  
      
            public boolean isClientTrusted(  
                    java.security.cert.X509Certificate[] certs) {  
                return true;  
            }  
      
            public void checkServerTrusted(  
                    java.security.cert.X509Certificate[] certs, String authType)  
                    throws java.security.cert.CertificateException {  
                return;  
            }  
      
            public void checkClientTrusted(  
                    java.security.cert.X509Certificate[] certs, String authType)  
                    throws java.security.cert.CertificateException {  
                return;  
            }  
        }  

2)

3)

4)

5)

6)

7)

8)

9)

10)



















